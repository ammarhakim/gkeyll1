/** Algebra to determine a self-adjoint projection operator */

load(diag);
/** Matrix of Legendre polynomial normalization coefficients (two is taken out) */
nCoeff : diag([1, 1/3, 1/5]); 

abar_l(i) := 1/2*(a(0,i-1) + bet*a(1,i-1) + alp*a(2,i-1) + a(0,i) - bet*a(1,i) + alp*a(2,i));
abar_r(i) := 1/2*(a(0,i) + bet*a(1,i) + alp*a(2,i) + a(0,i+1) - bet*a(1,i+1) + alp*a(2,i+1));

/*
alp : 1/5*(3*bet-1);
*/

c0 : 10;
c1 : 1/12;
c2 : (c0-2)/(5*(4*c0+8));
alp : 1/5*(3*bet-1);

abar_0(i) := 1/(2+c0)*(a(0,i-1)+c0*a(0,i)+a(0,i+1)) - c1*(a(1,i+1)-a(1,i-1)) + c2*(a(2,i+1)-2*a(2,i)+a(2,i-1));
abar_1(i) := 1/2*(abar_r(i)-abar_l(i));
abar_2(i) := 1/2*(abar_r(i)+abar_l(i)) -abar_0(i);

/** Write in terms of shift operator */
slist : [a(0,i-1)=Ti*a(0,i), a(0,i+1)=T*a(0,i),
  a(1,i-1)=Ti*a(1,i), a(1,i+1)=T*a(1,i),
  a(2,i-1)=Ti*a(2,i), a(2,i+1)=T*a(2,i)];

t1 : subst( slist, abar_0(i) );
t2 : subst( slist, abar_1(i) );
t3 : subst( slist, abar_2(i) );

/** Construct coefficient matrix */
coef_mat_4 : coefmatrix([t1,t2,t3], [a(0,i),a(1,i),a(2,i)]);

/** Quadriatic representation */
a(k,i) := if k=0 then x(i)^2 + dx^2/12 elseif k=1 then dx*x(i) elseif k=2 then dx^2/6 else false;

/** Solve to get c0 to exactly match quadriatic */
res : subst([x(i+1)=x(i)+dx, x(i-1)=x(i)-dx], solve(abar_0(i) = a(0,i), c0));
c0_res : fullratsimp( rhs(res[1]) );

/** This should be zero */
isZero_1 : fullratsimp( subst([x(i+1)=x(i)+dx, x(i-1)=x(i)-dx], abar_1(i)) ) - a(1,i);

res : subst([x(i+1)=x(i)+dx, x(i-1)=x(i)-dx], solve(abar_2(i) = a(2,i), bet));
bet_res : fullratsimp( rhs(res[1]) );

/*
 Answer: c0=10, bet=3/4 and alp=1/4
*/