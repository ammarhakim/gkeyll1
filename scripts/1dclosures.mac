/** 1D Closures */

assume(n0>0);
assume(p0>0);
assume(m>0);

/** 3+1 closure */
A31 : matrix( [0, n0*k, 0], [0, 0, k/(m*n0)], [0, 3*p0*k, 0] );

[vals, vects] : eigenvectors(A31);

/** Matrix of right and left eigenvectors */
Rev : (Rev : matrix([]), for i from 1 thru length (vals[1]) 
        do (for j from 1 thru vals[2][i] 
          do ( (Rev : addcol(Rev, transpose(matrix(vects[i][j])))))), Rev); 
Lev : fullratsimp( invert(Rev) );

/** Compute expansion coefficients */
expandCoeff : Lev . transpose( alpha*matrix([n0, 0, p0]) );
/** Express general solution in terms of expansion coefficients */
sol : sum( expandCoeff[i][1]*exp(-%i*vals[1][i]*t)*col(Rev,i), i, 1, 3 );

/** Now determine the final solution for number density evolution */
nSol : subst([p0 = m*n0*vt^2], realpart(sol[1][1]));

/** Taylor expansion */
nSolTay : taylor(nSol, t, 0, 9)/(alpha*n0);

/** 4+1 closure */
A41 : matrix( 
  [0, n0*k, 0, 0], 
  [0, 0, k/(m*n0), 0], 
  [0, 3*p0*k, 0, k], 
  [-3*p0^2/(m*n0^2)*k, 0, 3*p0*k/(m*n0), 0] );

[vals, vects] : eigenvectors(A41);

/** Matrix of right and left eigenvectors */
Rev : (Rev : matrix([]), for i from 1 thru length (vals[1]) 
        do (for j from 1 thru vals[2][i] 
          do ( (Rev : addcol(Rev, transpose(matrix(vects[i][j])))))), Rev); 
Lev : fullratsimp( invert(Rev) );

/** Compute expansion coefficients */
expandCoeff : Lev . transpose( alpha*matrix([n0, 0, p0, 0]) );
/** Express general solution in terms of expansion coefficients */
sol : sum( expandCoeff[i][1]*exp(-%i*vals[1][i]*t)*col(Rev,i), i, 1, 4 );

/** Now determine the final solution for number density evolution */
nSol : subst([p0 = m*n0*vt^2], realpart(sol[1][1]));

/** Taylor expansion */
nSolTay : taylor(nSol, t, 0, 9)/(alpha*n0);
