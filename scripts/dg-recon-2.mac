/** Script to perform upwind-biased three cell reconstruction */

load(orthopoly);

etal(x) := (x+dx)/(dx/2);
etar(x) := (x-dx)/(dx/2);
etac(x) := (x-0)/(dx/2);
etacf(x) := (x-0)/(3*dx/2);

/** Solution in each cells */
ul(x,pm) := sum(cl(k)*legendre_p(k,etal(x)), k, 0, pm);
ur(x,pm) := sum(cr(k)*legendre_p(k,etar(x)), k, 0, pm);
uc(x,pm) := sum(cc(k)*legendre_p(k,etac(x)), k, 0, pm);

/** Reconstruction is expressed as Legendre polynomial in 3 adjacent cells */
fit(x,pm) := sum(f(k)*legendre_p(k,etacf(x)), k, 0, 3*(pm+1)-1);

/** Reconstruction equation */
eqnf(k,pm) := integrate(fit(x,pm)*legendre_p(k,etacf(x)), x, -3*dx/2, 3*dx/2) =
              integrate(ul(x,pm)*legendre_p(k,etacf(x)), x, -3*dx/2, -dx/2)
	      +
	      integrate(uc(x,pm)*legendre_p(k,etacf(x)), x, -dx/2, dx/2)
	      +
	      integrate(ur(x,pm)*legendre_p(k,etacf(x)), x, dx/2, 3*dx/2);

/** Function to perform reconstruction in three cells */
calcRecon(x,pm) := block([eq, un, res],
  /* Make list of equations to solve */
  eq : makelist(eqnf(k,pm), k, 0, 3*(pm+1)-1-2),
  /* Append additional equations for upwinded values */
  eq : cons(ul(-dx/2,pm)=fit(-dx/2,pm), eq),
  eq : cons(uc(dx/2,pm)=fit(dx/2,pm), eq),
  /* Make list of unknowns */
  un : makelist(f(i), i, 0, 3*(pm+1)-1),
  /* Solve and extract results */
  res : solve(eq, un),
  return (map(rhs, res[1]))
);

evalc(x,c) := sum(c[k+1]*legendre_p(k,etacf(x)), k, 0, length(c)-1);

/** p=0 case */
c0 : calcRecon(x,0);
du0dt : fullratsimp( (evalc(dx/2, c0) - evalc(-dx/2, c0))/dx);

/** p=1 case */
c1 : calcRecon(x,1);
du0dt : fullratsimp( (evalc(dx/2, c1) - evalc(-dx/2, c1))/dx);
du1dt : (
  evalc(dx/2, c1)+evalc(-dx/2, c1) 
  - integrate(diff(legendre_p(1,etac(x)),x)*evalc(x,c1), x, -dx/2, dx/2)
  )*3/dx;

/** Compute stencil */
s_du0dt(j) := subst([cl(0)=u0(j-1), cc(0)=u0(j), cr(0)=u0(j+1), 
                    cl(1)=u1(j-1), cc(1)=u1(j), cr(1)=u1(j+1)], du0dt);
s_du1dt(j) := subst([cl(0)=u0(j-1), cc(0)=u0(j), cr(0)=u0(j+1), 
                    cl(1)=u1(j-1), cc(1)=u1(j), cr(1)=u1(j+1)], du1dt);

/** Rewrite in terms of shift operators */
du0T(j) := subst([u0(j+1)=T*u0(j), u1(j+1)=T*u1(j), u0(j-1)=Ti*u0(j), u1(j-1)=Ti*u1(j)], s_du0dt(j));
du1T(j) := subst([u0(j+1)=T*u0(j), u1(j+1)=T*u1(j), u0(j-1)=Ti*u0(j), u1(j-1)=Ti*u1(j)], s_du1dt(j));

/** Collect terms */
Tmat : dx*coefmatrix([du0T(j), du1T(j)], [u0(j),u1(j)]);
/** Compute eigenmatrix */
vN : rectform( subst([T=exp(%i*t), Ti=exp(-%i*t)], Tmat) );

