/* Generate the 10-moment equations */

load(itensor);

/** Declare symmetries */
decsym(P,2,0,[sym(all)],[]);
decsym(Q,3,0,[sym(all)],[]);

/** Number density */
dn : p0*D(u(1)) + u(1)*D(n);

/** Velocity */
du(i) := 1/p0*D(P([1,i],[])) + u(1)*D(u(i));

/** Pressure */
dP(i,j) := P([i,j],[])*D(u(1)) + D(u(i))*P([j,1],[]) + D(u(j))*P([i,1],[]) + u(1)*D(P([i,j],[]));

/** Construct list of equations and derviatives */
eqList : map(canform, [dn, du(1), du(2), du(3), dP(1,1), dP(1,2), dP(1,3), dP(2,2), dP(2,3), dP(3,3)]);
diffList : [D(n), D(u(1)), D(u(2)), D(u(3)), 
    D(P([1,1],[])), D(P([1,2],[])), D(P([1,3],[])),
    D(P([2,2],[])), D(P([2,3],[])),
    D(P([3,3],[]))];

/** Construct coefficient matrix */
Atmp : coefmatrix(eqList, diffList);

/** Perform substitutions to clean up final matrix */
Atm : subst(
    [u(1)=u1, u(2)=u2, u(3)=u3,
     P([1,1],[])=p11, P([1,2],[])=p12, P([1,3],[])=p13, 
     P([2,2],[])=p22, P([2,3],[])=p23,
     P([3,3],[])=p33],
 Atmp);

/** Source terms for pressure equations */
prSrc(i,j) := sum(sum(Om(m)*levi_civita([k,m,i])*P([j,k]), m, 1, 3), k, 1, 3)
   + sum(sum(Om(m)*levi_civita([k,m,j])*P([k,i]), m, 1, 3), k, 1, 3);

srcList : map(canform, [prSrc(1,1), prSrc(1,2), prSrc(1,3), prSrc(2,2), prSrc(2,3), prSrc(3,3)]);
srcJac : coefmatrix(srcList, [P([1,1],[]), P([1,2],[]), P([1,3],[]), P([2,2],[]), P([2,3],[]), P([3,3],[])  ]);

/** Define scalar pressure */
p : sum(P([i,i],[]), i, 1, 3)/3;

/** Collisional relaxation source term */
collSrc(i,j) := -nu*(P([i,j],[]) - kdelta([i,j],[])*p);

collSrcList : map(canform, [collSrc(1,1), collSrc(1,2), collSrc(1,3), collSrc(2,2), collSrc(2,3), collSrc(3,3)]);
collSrcJac : coefmatrix(collSrcList, [P([1,1],[]), P([1,2],[]), P([1,3],[]), P([2,2],[]), P([2,3],[]), P([3,3],[])  ]);

/** Collect diagonal terms */
collSrcListDiag : map(canform, [collSrc(1,1), collSrc(2,2), collSrc(3,3)]);
collSrcJacDiag : coefmatrix(collSrcListDiag, [P([1,1],[]), P([2,2],[]), P([3,3],[])  ]);
