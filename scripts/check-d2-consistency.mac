/** Check consistency of various DG approximations */

eta(x) := 2*x/dx;

/** Function to make matrix of coefficients */
makeTaylorMat(n) := block([Tmat],
  Tmat : (Tmat : zeromatrix(n,n), 
         for i from 0 thru n-1
	   do (for j from 0 thru n-1
	     do (Tmat[i+1,j+1] : integrate(x^j*legendre_p(i,eta(x))/factorial(j), x, -dx/2, dx/2))),
           Tmat),
  return (Tmat));

/** Make RHS */
makeRhsMat(n) := block([RHS],
  RHS : (RHS : diagmatrix(n,1),
         for i from 0 thru n-1
           do (RHS[i+1,i+1] : 2/(2*i+1)*dx/2),
         RHS),
  return (RHS));

nmax : 5;
/** Taylor series expansion around x=0 */
T(y) := df(j,0) + sum(y^k*df(j,k)/factorial(k), k, 1, nmax);

/** Compute nth order projection of expasion around cell with center 'xc' */
calcCoeff(n, xc) := fullratsimp( 
  (2*n+1)/dx*integrate( T(x)*legendre_p(n, 2*(x-xc)/dx), x, xc-dx/2, xc+dx/2)
);

/** Compute effective Taylor series in cells j-1,j,j+1 */

I0 : calcCoeff(0,0);
I1 : calcCoeff(1,0);
I2 : calcCoeff(2,0);

R0 : calcCoeff(0,dx);
R1 : calcCoeff(1,dx);
R2 : calcCoeff(2,dx);

L0 : calcCoeff(0,-dx);
L1 : calcCoeff(1,-dx);
L2 : calcCoeff(2,-dx);

/** Piecewise linear scheme */
convertMat_p1 : invert(makeTaylorMat(2)) . makeRhsMat(2);

/** RDG consistency */
Tmat_rdg : 1/4/dx^2*matrix(
       [9*Ti-18*I+9*T, -5*T+5*Ti],
       [15*T-15*Ti, -7*T-46*I-7*Ti]);

t0 : subst([T=R0, Ti=L0, I=I0], Tmat_rdg[1][1]);
t1 : subst([T=R1, Ti=L1, I=I1], Tmat_rdg[1][2]);
g0 : fullratsimp(t0 + t1);

t0 : subst([T=R0, Ti=L0, I=I0], Tmat_rdg[2][1]);
t1 : subst([T=R1, Ti=L1, I=I1], Tmat_rdg[2][2]);
g1 : fullratsimp(t0 + t1);

g_rdg_p1 : fullratsimp( convertMat_p1.transpose(matrix([g0,g1])) );

/** LDG */
Tmat_ldg : 1/dx^2*matrix(
       [4*Ti-8*I+4*T, 2*Ti+2*I-4*T],
       [-12*Ti+6*I+6*T, -6*Ti-24*I-6*T]);

t0 : subst([T=R0, Ti=L0, I=I0], Tmat_ldg[1][1]);
t1 : subst([T=R1, Ti=L1, I=I1], Tmat_ldg[1][2]);
g0 : fullratsimp(t0 + t1);

t0 : subst([T=R0, Ti=L0, I=I0], Tmat_ldg[2][1]);
t1 : subst([T=R1, Ti=L1, I=I1], Tmat_ldg[2][2]);
g1 : fullratsimp(t0 + t1);

g_ldg_a_p1 : fullratsimp( convertMat_p1.transpose(matrix([g0,g1])) );

/** S-LDG */
Tmat_sldg : 1/dx^2*matrix(
       [4*Ti-8*I+4*T, 3*Ti-3*T],
       [-9*Ti+9*T, -6*Ti-24*I-6*T]);

t0 : subst([T=R0, Ti=L0, I=I0], Tmat_sldg[1][1]);
t1 : subst([T=R1, Ti=L1, I=I1], Tmat_sldg[1][2]);
g0 : fullratsimp(t0 + t1);

t0 : subst([T=R0, Ti=L0, I=I0], Tmat_sldg[2][1]);
t1 : subst([T=R1, Ti=L1, I=I1], Tmat_sldg[2][2]);
g1 : fullratsimp(t0 + t1);

g_ldg_s_p1 : fullratsimp( convertMat_p1.transpose(matrix([g0,g1])) );

/** Piecewise quadratic schemes */
convertMat_p2 : invert(makeTaylorMat(3)) . makeRhsMat(3);

/** Asymmetric LDG scheme (version 1) */
Tmat_ldg_p2_a : 1/dx^2*matrix(
   [-18*I+9*T+9*Ti, 2*I-9*T+7*Ti, -12*I+9*T+3*Ti],
   [6*I+21*T-27*Ti, -54*I-21*T-21*Ti, 24*I+21*T-9*Ti],
   [-60*I+15*T+45*Ti, 40*I-15*T+35*Ti, -90*I+15*T+15*Ti]);

t1 : subst([T=R0, Ti=L0, I=I0], Tmat_ldg_p2_a[1][1]);
t2 : subst([T=R1, Ti=L1, I=I1], Tmat_ldg_p2_a[1][2]);
t3 : subst([T=R2, Ti=L2, I=I2], Tmat_ldg_p2_a[1][3]);
g0 : fullratsimp(t1+t2+t3);

t1 : subst([T=R0, Ti=L0, I=I0], Tmat_ldg_p2_a[2][1]);
t2 : subst([T=R1, Ti=L1, I=I1], Tmat_ldg_p2_a[2][2]);
t3 : subst([T=R2, Ti=L2, I=I2], Tmat_ldg_p2_a[2][3]);
g1 : fullratsimp(t1+t2+t3);

t1 : subst([T=R0, Ti=L0, I=I0], Tmat_ldg_p2_a[3][1]);
t2 : subst([T=R1, Ti=L1, I=I1], Tmat_ldg_p2_a[3][2]);
t3 : subst([T=R2, Ti=L2, I=I2], Tmat_ldg_p2_a[3][3]);
g2 : fullratsimp(t1+t2+t3);

g_ldg_a_p2 : fullratsimp(convertMat_p2.transpose(matrix([g0,g1,g2])));

/** Asymmetric LDG scheme (version 2) */
Tmat_ldg_p2_b : 1/dx^2*matrix(
   [-18*I+9*T+9*Ti, -2*I-7*T+9*Ti, -12*I+3*T+9*Ti],
   [-6*I+27*T-21*Ti, -54*I-21*T-21*Ti, -24*I+9*T-21*Ti],
   [-60*I+45*T+15*Ti, -40*I-35*T+15*Ti, -90*I+15*T+15*Ti]);

/** Symmetric LDG scheme */
Tmat_ldg_p2_s : fullratsimp(1/2*(Tmat_ldg_p2_a+Tmat_ldg_p2_b));

t1 : subst([T=R0, Ti=L0, I=I0], Tmat_ldg_p2_s[1][1]);
t2 : subst([T=R1, Ti=L1, I=I1], Tmat_ldg_p2_s[1][2]);
t3 : subst([T=R2, Ti=L2, I=I2], Tmat_ldg_p2_s[1][3]);
g0 : fullratsimp(t1+t2+t3);

t1 : subst([T=R0, Ti=L0, I=I0], Tmat_ldg_p2_s[2][1]);
t2 : subst([T=R1, Ti=L1, I=I1], Tmat_ldg_p2_s[2][2]);
t3 : subst([T=R2, Ti=L2, I=I2], Tmat_ldg_p2_s[2][3]);
g1 : fullratsimp(t1+t2+t3);

t1 : subst([T=R0, Ti=L0, I=I0], Tmat_ldg_p2_s[3][1]);
t2 : subst([T=R1, Ti=L1, I=I1], Tmat_ldg_p2_s[3][2]);
t3 : subst([T=R2, Ti=L2, I=I2], Tmat_ldg_p2_s[3][3]);
g2 : fullratsimp(t1+t2+t3);

g_ldg_s_p2 : fullratsimp(convertMat_p2.transpose(matrix([g0,g1,g2])));

/** Recovery DG scheme */
Tmat_rdg_p2 : matrix(
 [(15*T+15*Ti-30*I)/(4*dx^2),-(11*T-11*Ti)/(4*dx^2),(6*T+6*Ti-12*I)/(5*dx^2)],
 [(33*T-33*Ti)/(4*dx^2),-(93*T+93*Ti+342*I)/(16*dx^2),(183*T-183*Ti)/(80*dx^2)],
 [(15*T+15*Ti-30*I)/(4*dx^2),-(25*T-25*Ti)/(16*dx^2),-(9*T+9*Ti+402*I)/(16*dx^2)]);

t1 : subst([T=R0, Ti=L0, I=I0], Tmat_rdg_p2[1][1]);
t2 : subst([T=R1, Ti=L1, I=I1], Tmat_rdg_p2[1][2]);
t3 : subst([T=R2, Ti=L2, I=I2], Tmat_rdg_p2[1][3]);
g0 : fullratsimp(t1+t2+t3);

t1 : subst([T=R0, Ti=L0, I=I0], Tmat_rdg_p2[2][1]);
t2 : subst([T=R1, Ti=L1, I=I1], Tmat_rdg_p2[2][2]);
t3 : subst([T=R2, Ti=L2, I=I2], Tmat_rdg_p2[2][3]);
g1 : fullratsimp(t1+t2+t3);

t1 : subst([T=R0, Ti=L0, I=I0], Tmat_rdg_p2[3][1]);
t2 : subst([T=R1, Ti=L1, I=I1], Tmat_rdg_p2[3][2]);
t3 : subst([T=R2, Ti=L2, I=I2], Tmat_rdg_p2[3][3]);
g2 : fullratsimp(t1+t2+t3);

g_rdg_p2 : fullratsimp(convertMat_p2.transpose(matrix([g0,g1,g2])));