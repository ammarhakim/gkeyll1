# -*- org -*-

#+TITLE:     Things To Be Done
#+AUTHOR:    Ammar Hakim
#+EMAIL:     ahakim@pppl.gov
#+LANGUAGE:  en
#+STARTUP: overview
#+TAGS: GKEYLL(g) LUCEE(l) HOME(h) WARPX(w) INFRA(i) PUBS(p)

This file contains things to be done. The TODO items are sub-bullets
in a task and are kept till the task is done. Completed tasks are
archived.

* Gkeyll GKE project

  Things to do in Gkeyll for GKE project.

** Remove restriction of nodal coordinates to 3D?		     :GKEYLL:

   At many places it is assumed that the coordinates live in 3D space,
   even if the grid is 1D or 2D. This is fine for some cases but for
   the GKE problems in 4D/5D this is a big problem. Need to somehow
   fix this. One issue is also that the updaters that expect Lua
   functions are defined to be *always* on (x,y,z) grid. This is not
   good. Looks like a major change in the C++ as well as the Lua. Best
   would be do something such that the Lua is untouched.

   One option would be to send always atleast three coordinates. This
   way current Lua code need not be changed. Should be easier than
   fixing all the Lua scripts.

** Implement moment based modal limiters in Gkeyll 1D solver 	     :GKEYLL:

   Compare with the Nair book notes and figure out why Seth's code is
   diffusive. Perhaps there is something missing in their description
   which makes the solution look better.

** Write source integrator for nodal DG scheme			     :GKEYLL:

   So source terms can be included in DG updates

** Implement BC updaters for nodal DG scheme			     :GKEYLL:

   Wall BCs are probably the ones needed for now.

** Work out generic kinetic equation updater 			     :GKEYLL:

   Formulate the scheme for generic kinetic equations. Use
   characteristic computed externally.

** Write HyperEqn for collisions with LB operator, write JE 	     :GKEYLL:

   Unify the advection and diffusion updates needed in the LB operator
   into a single equation. Write JE on stand-alone collision operator
   and coupled to the Vlasov solver.

** Allow HyperEqn to take coordinates as input			     :GKEYLL:

   The hyperEqn class, and all its derived classes, need to take the
   coordinates as input to the various methods. Should have done this
   from the start. One non-intrusive method would be to add a
   setCurrLocation() method to the class. This would eliminate the
   need to modify the class interface. Perhaps this is not such a good
   idea.

** Fix IntergrateNodalField to use Gaussian quadrature		     :GKEYLL:

   Do not use Lobatton quadrature as it could be problematic when
   integrating nonlinear fields.

** Figure out a way to do sources in a modular manner		     :GKEYLL:

   The current source calculation method is not flexible as it assumes
   that aliasing can work. Need to find a fix. 

   The correct long-term fix is to introduce a nodal FE
   field. However, I wonder if that should wait for the integration of
   Blitz++ into the framework. See notes for March 15th 2012.

** Convert Poisson solver and related classes for parallel 	     :GKEYLL:

   The Poisson solver and related classes (NodalFiniteElementIfc) only
   work in serial. Need to convert these to parallel. Perhaps this is
   not hard, but will need to look into the complete chain of classes,
   including

** Figure out the normalization issue with Maxima root-finder	     :GKEYLL:

   The comparison in JE15 with exact solutions is not complete. Looks
   like a problem with normalization. Also, the dispersion relation
   probably needs to be rederived for this case.

** Generalize PoissonBracket updater				     :GKEYLL:

   Allow this to work in arbitrary dimensions, with updateDirs
   specified as an input. This will allow doing multiple dimension
   solves using a splitting scheme.

** Write limiter for nodal DG					     :GKEYLL:

** Fix the asymmetric matrix issue in Poisson (and related updaters) :GKEYLL:

   At present only direct solves work. Need to fix this.


* Gkeyll documentation

  This is for writing journal notes and other documentation related
  tasks.

** Write draft of first paper on Gkeyll				       :PUBS:

   Aim to solve Vlasov-Poisson/Quasineutral equations in 1D/1V and
   show particle and energy conservation and non conservation of
   momentum. Perhaps implement positivity in the mean. Put in
   Lenard-Bernstein collision operator.

   To complete the things needed the paper following need to be done.

*** Add collisions to the Vlasov-Poisson solver
*** Figure out the exact dispersion relation for ion-acoustic waves
*** Do the case of discontinuous potential for ion-acoustic waves

** Write notes on basis functions for use in FEM schemes	     :GKEYLL:

   A large number of matrices and other information is needed from FE
   basis functions for use in different parts of the code. Document
   these and explain why they are needed. This will also help creation
   of the general class to do this for general quad/hex/tri/tet cells.

** Make list of all updaters, datastructs, grids in Lucee.	     :GKEYLL:

   This will give some idea on what exists now and what needs to be
   documented. Also, some code can then be removed based on this
   master list.

** Write JE on testing existing nodal DG scheme			     :GKEYLL:

   Without limiters and in 2D and 3D with advection, Maxwell and Euler
   equations. This will prep the way for two-fluid solutions.

   Also show tests with auxilary variables. Do advection in 1D
   advection-diffusion and also a advection-diffusion in 2D
   (transverse propagation, solid-body rotation with and without
   diffusion).
   
** Split each updater/datastruct docs into its own file 	     :GKEYLL:

   I need to document each updater, datastructure and grid object
   currently in Gkeyll. Each should be in its own RST file rather than
   a single file for all updaters etc. This makes searching and
   indexing easier.

** Create documentation for complex pieces of the code		     :GKEYLL:

   This could be written by hand or typed up. But should be put into
   the repo and notes on where to find it should be in the code as
   comments. For example, a lot of the general order, arbitrary
   dimension code is nearly incomprehensible.

* Gkeyll infrastructure work

  This is for broader infrastructure work which does not involve any
  specific solver or physics issue.

** Use subprocess python module in xregtest.py			      :INFRA:

   The problem now is that the return code form the gkeyll process is
   being ignored. This needs to be looked at to make sure that gkeyll
   itself worked even before comparing against accepted results.

** Add more regression tests					      :INFRA:

   There are many updaters, equation systems etc. that have no
   tests. This needs to change, and more tests added.

** Add unit tests for getSendNeighbors() method			      :INFRA:

   I added the getSendNeighbors() method to compute the regions to
   which we should send data. This is not tested yet, although when
   used in the sync() method it seems to work just fine.

** Complete MultiRegion class 					      :INFRA:

   Finish the iterator access (or get rid of it) and complete the
   code to allow adding connectivity information.

** Fix DataStruct::write() method to use sub-communicators 	      :INFRA:

   The DynVector can not be written by all processors for obvious
   reasons. Hence, the DataStruct::write() method needs to be modified
   to allow a data-structure to take a sub-communicator so only a
   sub-set of processors do the I/O.

** Make neighbor calculations for periodic boundaries. 		      :INFRA:

   A significant unresolved issue: how to deal with periodic domains?
   The neighbor calculation code needs to change for that. Essentially
   on each periodic side of the global region (including corners) we
   need to make copies of the global region. This will then give the
   proper neighbors, including self-intersections. Some ambiguity
   exists in the case in which the only one direction is
   periodic. Question: should the periodic conditions include corners
   in this case? I do not know, yet.

** Fix hang in parallel test					      :INFRA:

   With this Gkeyll will be ready for parallel runs. The problem is in
   the sync() method.

** Registration of objects 					      :INFRA:

   Currently the object registration depends on a doing a "new". Need
   to replace this with a proper function so that cleanup of the
   registred objects can be done if needed. Also, this adds an
   additional layer, opening up the possibility for doing more complex
   things later.
   
   One possible solution:

#+BEGIN_EXAMPLE
   Lucee::registerObject<Lucee::UpdaterIfc, Lucee::PeriodicPoisson2DUpdater>();
#+END_EXAMPLE

   I.e. the method would be templated over the base and derived class
   but otherwise would not take any parameters. In the body of the
   method the ObjRegistry<> object would be created and the object
   pointer put into a map, using the derived class Id as a key. Then,
   a set of "unload" methods would be provided that would remove the
   appropriate objects from the map, or all objects for a specified
   base class or clear out all registered objects completely.

** Improve HDF5 output

   Allow appending data to the same file. Also somehow one needs to
   use better names for the output groups and dataspaces.

** Allow writing all data (including ghost) from Lua		      :INFRA:

   This, combined with the ability to write to a single HDF5 file will
   allow "exact" restarts. The problem with reading from an HDF5 file
   from the current write() method is that it might not have the ghost
   cell data and hence could lead to errors on a restart.

   One option for this would be extend the current write() method to
   take two extra parameters: one, name of the data-structure and
   second, a boolean flag to indicate if the ghost-cell data should be
   written. If this flag is set to true then the "writeGhost"
   parameter in the DataStruct block will be ignored.

** Enable initializing fields from HDF5 files			      :INFRA:
   
   So restart can be enabled.

** Why does Lua script not have access to command line options?	      :INFRA:

** Transition to eigen matrix package				      :INFRA:

   Get rid of the Lucee::Matrix, Lucee::Vector and Lucee::Vec3 classes
   and replace them with the ones provided in the eigen C++
   package. This might need to be done in a staged manner as a lot of
   the code depends on the Lucee matrix classes and so this will
   involve significant refactoring.

** Transition to Blitz++ package

   Get rid of Lucee::Array in favor of Blitz::Array. This might be a
   tough task, but it needs to be done sooner than later.

** Transition to Luabind					      :INFRA:

   Use the luabind package to wrap the C++ code for use in Lua
   programs. This might be a non-trivial refactor as the Lua wrapping
   code in Lucee is deeply embedded into the framework and it will be
   a major task to change.

   However, a major advantage of luabind is that it will make future
   bindings much easier to create and allow for a much more
   fine-grained control from Lua than is possible now.

** Seems like duplicate() method creates mucked up fields 	     :GKEYLL:

   These fields can not be written out, it seems. This needs to be
   fixed. Perhaps this should wait till the transition to Blitz::Array
   is done?


* Work related

  This is stuff not directly related to Gkeyll.

** Warpx does not build with petsc anymore			      :WARPX:

   I have finally boiled this down to a link problem with
   Fortran. Needs fixing.


