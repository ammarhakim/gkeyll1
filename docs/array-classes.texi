This chapter describes the array classes in Lucee.

@section @code{Lucee::FixedVector}: Fixed-size Vectors.
@cindex Fixed-size vector.
@cindex @code{Lucee::FixedVector}
@cindex @code{FixedVector} class, namespace @code{Lucee}.

The class @code{Lucee::FixedVector} provides a one-dimensional array of
fixed size. The size of the array must be know at compile time. It is
declared as
@example
namespace Lucee
@{
  template <unsigned NELEM, typename T>
  class FixedVector;
@}
@end example
@noindent
The first template parameter specifies the size of the vector and second
parameter specifies the type.

@deftypemethod Lucee::FixedVector @emph{ctor} FixedVector (@code{const T&} init)
Create a new fixed-size vector and set all values to @emph{init}
@end deftypemethod

@deftypemethod Lucee::FixedVector @emph{ctor} FixedVector (@code{T} vals[NELEM])
Create a new fixed-size vector and set values to ones specified in
@emph{val} array.
@end deftypemethod

@deftypemethod Lucee::FixedVector @emph{ctor} FixedVector (@code{T} v1, ...)
Create a new fixed-size vector and set values @math{(v_1, \ldots)}. Note
that exactly @code{NELEM} values must be specified for this function to
work correctly. The method will fail silently if incorrect number of
values are specified.
@end deftypemethod

@deftypemethod Lucee::FixedVector @code{T&} operator[] (@code{int} i)
Access element at index @math{i} in vector.
@end deftypemethod

@deftypemethod Lucee::FixedVector unsigned getLength ()
Get length of vector.
@end deftypemethod

@deftypemethod Lucee::FixedVector T getNorm ()
Compute @math{l_2}-norm of vector. The norm only makes sense for double
and floating point vectors.
@end deftypemethod

@section @code{Lucee::Array}: @math{N}-dimensional Arrays.
@cindex Arrays, basic class.
@cindex @code{Lucee::Array}
@cindex @code{Array} class, namespace @code{Lucee}.

The class @code{Lucee::Array} provides a N-dimensional reference counted
array of arbitrary types. It is declared as:
@example
// LcArray.h
namespace Lucee
@{
  template <unsigned NDIM, typename T> class Array;
@}
@end example
@noindent 
The first template parameter indicates the rank of the array and the
second, the type of data stored in the array.

@deftypemethod Lucee::Array @emph{ctor} Array (@code{unsigned} shape[NDIM], @code{const T&} init)
Create a new array with given shape. Start indices are assumed to be
@math{(0,\ldots)}. An optional @emph{init} value can be specified and
is applied to all elements of the array. By default @emph{init}=0.
@end deftypemethod

@deftypemethod Lucee::Array @emph{ctor} Array @
 (@code{unsigned} shape[NDIM], @code{int} start[NDIM], @code{const T&} init)
Create a new array with given shape and specified start indices. An
optional @emph{init} value can be specified and is applied to all
elements of the array. By default @emph{init}=0.
@end deftypemethod

@deftypemethod Lucee::Array @emph{ctor} Array (@code{const Array}& arr) 
Create a new array that is a shallow copy of @emph{arr}. No data is
actually allocated and the new array points to the same memory space as
@emph{arr}.
@end deftypemethod

@deftypemethod Lucee::Array Lucee::Array& operator= (@code{const Array<T>}& arr)
Shallow copy @emph{arr}. The call makes this array an alias for
@emph{arr}. I.e. no data is allocated and modifying one changes the
other.
@end deftypemethod

@deftypemethod Lucee::Array @code{Lucee::Array&} operator= (@code{const T&} val)
Set all elements of array to @emph{val}.
@end deftypemethod

@deftypemethod Lucee::Array unsigned getRank ()
Return the rank of the array.
@end deftypemethod

@deftypemethod Lucee::Array unsigned isContiguous ()
Return true if the array is stored contiguously. Note that trying to
create view-arrays or accessing the raw memory pointer of a
non-contiguous array will lead to a run-time exception being thrown.
@end deftypemethod

@deftypemethod Lucee::Array void fillWithShape (@code{unsigned} shape[N])
On return fill the shape of the array in @emph{shape}.
@end deftypemethod

@deftypemethod Lucee::Array @code{unsigned} getShape (@code{int} dir)
Return the shape of the array in direction @emph{dir}.
@end deftypemethod

@deftypemethod Lucee::Array @code{int} getLower (@code{int} dir)
Return the starting index in direction @emph{dir}.
@end deftypemethod

@deftypemethod Lucee::Array @code{int} getUpper (@code{int} dir)
Return @emph{one past} the last index in direction @emph{dir}.
@end deftypemethod

@deftypemethod Lucee::Array @code{T&} operator() (@code{int} i, @code{int} j, ...)
Access element at @math{(i,j,\ldots)} index location in array. For a
@math{N}-dimensional array exactly @math{N} indices must be specified. A
compile-time error will occur when trying to use this method with the
incorrect number of indices.
@end deftypemethod

@deftypemethod Lucee::Array @code{T&} operator() (@code{int} i[N])
Access element at index @math{(i_1,\ldots,i_N)} index location in array.
@end deftypemethod

@deftypemethod Lucee::Array @code{Lucee::Array<N,T>&} createView @ 
  (@code{unsigned} shape[N] , @code{int} start[N], @code{int} newStart[N])
Returns a view-array into the original array. The view-array behaves
exactly like a @code{Lucee::Array}. The portion of the original array
indexed by the view-array is specified by lower bounds, @emph{start},
and the shape, @emph{shape}. The indices @emph{newStart} indicate the
new starting index of the view-array. In most cases this can simply be
set to @emph{start}.
@end deftypemethod

@section @code{Lucee::Vector}: One-dimensional Arrays.
@cindex Vector class.
@cindex @code{Lucee::Vector}
@cindex @code{Vector} class, namespace @code{Lucee}.

The @code{Lucee::Vector} class inherits from the @code{Lucee::Array}
class and provides a specialized container for one-dimensional arrays of
@code{int}, @code{float} or @code{double}. Certain linear algebra
functions are only defined for @code{float} or @code{double}. It is
declared as:
@example
// LcVector.h
namespace Lucee
@{
  template <typename T> class Vector;
@}
@end example

@deftypemethod Lucee::Vector @emph{ctor} Vector (@code{unsigned} len)
Create a new vector with specified length. The start index is assumed
@math{0}. All vector elements are initialized to @math{0}.
@end deftypemethod

@deftypemethod Lucee::Vector @emph{ctor} Vector (@code{unsigned} len, @code{int} start)
Create a new vector with specified length and start index
@emph{start}. All vector elements are initialized to @math{0}.
@end deftypemethod

@deftypemethod Lucee::Vector @code{T&} operator[] (@code{int} i)
Access element at index @math{i} in vector.
@end deftypemethod

@deftypemethod Lucee::Vector unsigned getLength ()
Get length of the vector.
@end deftypemethod

@section @code{Lucee::Matrix}: Matrices and Linear Algebra.
@cindex Matrix class.
@cindex @code{Lucee::Matrix}
@cindex @code{Matrix} class, namespace @code{Lucee}.

The @code{Lucee::Matrix} class inherits from the @code{Lucee::Array}
class and provides a specialized container for two-dimensional arrays of
@code{int}, @code{float} or @code{double}. Certain linear algebra
functions are only defined for @code{float} or @code{double}. The matrix
elements are stored in column major order to enable use of Fortran
routines for linear algebra. It is declared as:
@example
// LcMatrix.h
namespace Lucee
@{
  template <typename T> class Matrix;
@}
@end example

@deftypemethod Lucee::Matrix @emph{ctor} Matrix (@code{unsigned} row, @code{unsigned} col)
Create a new matrix with specified @emph{row}s and @emph{col}s. The
start indices are assumed @math{(0,0)}. All matrix elements are
initialized to @math{0}.
@end deftypemethod

@deftypemethod Lucee::Matrix @emph{ctor} Matrix (@code{unsigned} shape[2])
Create a new matrix with specified @emph{shape}. The start indices are
assumed @math{(0,0)}. All matrix elements are initialized to @math{0}.
@end deftypemethod

@deftypemethod Lucee::Matrix @emph{ctor} Matrix (@code{unsigned} shape[2], @code{int} start[2])
Create a new matrix with specified @emph{shape} and given @emph{start}
indices. All matrix elements are initialized to @math{0}.
@end deftypemethod

@deftypemethod Lucee::Matrix unsigned numRows ()
Return number of rows in matrix.
@end deftypemethod

@deftypemethod Lucee::Matrix unsigned numColumns ()
Return number of columns in matrix.
@end deftypemethod

@deftypemethod Lucee::Matrix  Lucee::Vector<T>& getColumn (unsigned col)
Return the @emph{col} column of the matrix.
@end deftypemethod

@deftypemethod Lucee::Matrix  Lucee::Vector<T>& getRow (unsigned row)
Return the @emph{row} row of the matrix.
@end deftypemethod

@deftypemethod Lucee::Matrix void eig (@code{Vector<T>&} evr, @code{Vector<T>&} evi)
Compute the eigenvalues of the matrix.  The matrix must be square or an
exception is thrown. The real part of the eigenvalues are returned in
@emph{evr} and the imaginary part are returned in @emph{evi}. These
vectors must be pre-allocated and contiguous.
@end deftypemethod

@deftypemethod Lucee::Matrix void eig @
 (@code{Vector<T>&} evr, @code{Vector<T>&} evi, @code{Matrix<T>&} vecl, @code{Matrix<T>&} vecr)

Compute the eigenvalues and the eigenvectors of the matrix. The matrix
must be square or an exception is thrown. The real part of the
eigenvalues are returned in @emph{evr} and the imaginary part are
returned in @emph{evi}. The left eigenvectors are returned as columns of
@emph{vecl} and the right eigenvectors as the columns of
@emph{vecr}. The vectors and matrices must be pre-allocated and
contiguous.
@end deftypemethod

@deftypemethod Lucee::Matrix void eigRight @ 
 (@code{Vector<T>&} evr, @code{Vector<T>&} evi, @code{Matrix<T>&} vec)

Compute the eigenvalues and the right eigenvectors of the matrix. The
matrix must be square or an exception is thrown. The real part of the
eigenvalues are returned in @emph{evr} and the imaginary part are
returned in @emph{evi}. The right eigenvectors are returned as the
columns of @emph{vec}, which must be of the same shape as this
matrix. The vectors and matrices must be pre-allocated and contiguous.
@end deftypemethod

@deftypemethod Lucee::Matrix void eigLeft @
 (@code{Vector<T>&} evr, @code{Vector<T>&} evi, @code{Matrix<T>&} vec)

Compute the eigenvalues and the left eigenvectors of the matrix. The
matrix must be square or an exception is thrown. The real part of the
eigenvalues are returned in @emph{evr} and the imaginary part are
returned in @emph{evi}. The left eigenvectors are returned as the
columns of @emph{vec}, which must be of the same shape as this
matrix. The vectors and matrices must be pre-allocated and contiguous.
@end deftypemethod

@deftypemethod Lucee::Matrix void solve (@code{Matrix<T>&} rhs)

Solve the linear system of equations @math{Ax=b}, where @math{A} is
@emph{this} matrix and @math{b} are columns of the matrix
@emph{rhs}. The matrix @emph{A} must be square or an exception is
thrown. The @emph{rhs} matrix must have same number of rows as
@emph{A}. On output the columns of the @emph{rhs} matrix are replaced by
the corresponding solution vector. The template parameter @code{T} must
be one of @code{float} or @code{double}. A @math{LU} decomposition is
used to solve the system of equations.
@end deftypemethod

@deftypemethod Lucee::Matrix Matrix<T> transpose ()
Create the transpose of the matrix. No data is actually allocated and
the transposed matrix shares data with this matrix. Hence, modifying one
will affect the other.
@end deftypemethod

@section @code{Lucee::ColMajorIndexer}: Column Major Indexer.
@cindex Column major indexer.
@cindex Indexer, column major.
@cindex @code{Lucee::ColMajorIndexer}
@cindex @code{ColMajorIndexer} class, namespace @code{Lucee}.

The @code{Lucee::ColMajorIndexer} class provides a mapping of a
@math{N}-dimensional index space into a @math{1}-dimensional linear
index space. It is declared as:
@example
// LcColMajorIndexer.h
namespace Lucee
@{
  template <unsigned NDIM> class ColMajorIndexer;
@}
@end example
@noindent
The template parameter @code{NDIM} indicates the rank (dimension) of the
index space.

@deftypemethod Lucee::ColMajorIndexer @emph{ctor} ColMajorIndexer @
  (@code{unsigned} shape[NDIM], @code{int} start[NDIM])
Create a indexer which maps a @code{NDIM} dimensional index space of
specified @emph{shape} and given @emph{start} indices into a linear
1-dimensional index.
@end deftypemethod

@deftypemethod Lucee::ColMajorIndexer @code{int} getLower (@code{int} dir)
Return the starting index in direction @emph{dir}.
@end deftypemethod

@deftypemethod Lucee::ColMajorIndexer @code{int} getUpper (@code{int} dir)
Return @emph{one past} the last index in direction @emph{dir}.
@end deftypemethod

@deftypemethod Lucee::ColMajorIndexer @code{int} getIndex (@code{int} i, @code{int} j, ...)
Return index into the 1-dimensional space corresponding to the index in
the @math{N}-dimensional space @math{(i,j,\ldots)}. For a
@math{N}-dimensional space exactly @math{N} indices must be specified. A
compile-time error will occur when trying to use this method with the
incorrect number of indices.
@end deftypemethod

@deftypemethod Lucee::ColMajorIndexer @code{int} getGenIndex (@code{int} i[N])
Return index into the 1-dimensional space corresponding to the index
@math{(i_1,\ldots,i_N)} index location in @math{N}-dimensional space.
@end deftypemethod

