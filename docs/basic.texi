This chapter describes the basic infrastructure classes in Lucee.

@section @code{Lucee::Array}: @math{N}-dimensional Array Class.
@cindex Arrays, basic class.
@cindex @code{Lucee::Array}

@subsection Overview

The @code{Lucee::Array} class provides serial array of arbitrary rank
(dimensions). By default arrays are zero-based but other start indices
can also be specified. Arrays can be created by specifying the shape
and, optionally, the starting index along each rank.

@example
#include <LcArray.h>

unsigned shape[2] = @{5, 10@};
Lucee::Array<2, double> arr1(shape);

int start[2] = @{2, 0@};
Lucee::Array<2, double> arr2(shape, start);
@end example

@noindent
This will create rank-two @math{5\times 10} arrays @code{arr1}, indexed
starting @math{(0,0)}, and @code{arr2}, indexed starting
@math{(2,0)}. All elements in the array can be set using the assignment
operator: for example, @code{arr1=5.0}, will set all elements of
@code{arr1} to @math{5.0}. One can loop over the arrays, setting them:
@example
for (int i=arr1.getStart(0); i<arr1.getEnd(0); ++i)
  for (int j=arr1.getStart(1); j<arr1.getEnd(1); ++j)
    arr1(i,j) = i+j;
@end example

View-arrays into an existing array can be created. View-arrays are
arrays that allow access to parts of another array. Modifications made
to the original or view-array are reflected in the other,
i.e. view-arrays share data with their parent array.
@example
unsigned shape[2] = @{100, 100@};
Lucee::Array<2, double> arr(shape);

unsigned viewShape[2] = @{20, 20@};
int viewStart[2] = @{5, 5@};
int zeros[2] = @{0, 0@};
Lucee::Array<2, double>& view =
  arr.createView(viewShape, viewStart, zeros);
@end example

@noindent
This will create a view-array @code{view} into the original array
@code{arr}. The view-array's start index will be @math{(0,0)}.
Modifications made to either the view-array or the original array will
also affect the other.

Sometimes a view-array of a lower dimension than the original one needs
to be created. For example, say an array representing row @math{3} of
@code{arr} is required. This can be done as follows:
@example
unsigned deflateRanks[1] = @{0@};
int deflateIdx[1] = @{3@};
unsigned viewShape[1] = arr.shape(1);
int viewStart[1];
viewStart[0] = arr.lower(1);

Lucee::Array<1, double>& row3 =
  arr.createView<1>(deflateRanks, deflateIdx, viewShape, viewStart);
@end example
This will create @code{row3} be an alias for row @math{3} in
@code{arr}.

@subsection Reference

The class @code{Lucee::Array} provides a N-dimensional, reference
counted, array of arbitrary types. It is declared as:
@example
namespace Lucee
@{
  template <unsigned NDIM, typename T> class Array;
@}
@end example
@noindent 
The first template parameter indicates the rank of the array and the
second, the type of data stored in the array.

@deftypemethod Lucee::Array unsigned getRank ()
Return the rank of the array.
@end deftypemethod

@deftypemethod Lucee::Array unsigned isContiguous ()
Return true if the array is stored contiguously. Note that trying to
create view-arrays or accessing the raw memory pointer of a
non-contiguous array will lead to a run-time exception being thrown.
@end deftypemethod

@deftypemethod Lucee::Array void fillWithShape (@code{unsigned} shape[N])
On return fill the shape of the array in @code{shape}.
@end deftypemethod

@deftypemethod Lucee::Array @code{unsigned} getShape (@code{int} dir)
Return the shape of the array in direction @code{dir}.
@end deftypemethod

@deftypemethod Lucee::Array @code{int} getStart (@code{int} dir)
Return the starting index in direction @code{dir}.
@end deftypemethod

@deftypemethod Lucee::Array @code{int} getEnd (@code{int} dir)
Return @emph{one past} the last index in direction @code{dir}.
@end deftypemethod

@deftypemethod Lucee::Array @code{T&} operator() (@code{int} i, @code{int} j, ...)
Access element at @math{(i,j,\ldots)} index location in array. For a
@math{N}-dimensional array exactly @math{N} indices must be specified. A
compile-time error will occur when trying to use this method with the
incorrect number of indices.
@end deftypemethod

@deftypemethod Lucee::Array @code{T&} operator() (@code{int} i[N])
Access element at index @math{(i_0,i_1,\ldots)} index location in array.
@end deftypemethod

@deftypemethod Lucee::Array @code{Lucee::Array&} operator= (@code{const T&} val)
Set all elements of array to @code{val}.
@end deftypemethod

@deftypemethod Lucee::Array @code{Lucee::Array<N,T>&} createView (@code{unsigned} shape[N] , @code{int} start[N], @code{int} newStart[N])
Returns a view-array into the original array. The view-array behaves
exactly like a @code{Lucee::Array}. The portion of the original array
indexed by the view-array is specified by lower bounds, @code{start},
and the shape, @code{shape}. The indices @code{newStart} indicate the
new starting index of the view-array. In most cases this can simply be
set to @code{start}.
@end deftypemethod
